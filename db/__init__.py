import os import sqlite3 from contextlib import contextmanager from pathlib import Path DB_URL = os.environ.get("DATABASE_URL", "sqlite:///influe.db") def _resolve_sqlite_path(url: str) -> str: # Aceita formatos: sqlite:///arquivo.db | sqlite:////abs/arquivo.db | influe.db if url.startswith("sqlite:///"): path = url.replace("sqlite:///", "", 1) elif url.startswith("sqlite:////"): path = url.replace("sqlite:////", "/", 1) else: path = url return path SQLITE_PATH = _resolve_sqlite_path(DB_URL) Path(SQLITE_PATH).parent.mkdir(parents=True, exist_ok=True) def get_connection() -> sqlite3.Connection: conn = sqlite3.connect(SQLITE_PATH, timeout=30, isolation_level=None) # autocommit off/on by BEGIN conn.row_factory = sqlite3.Row return conn @contextmanager def db_cursor(): conn = get_connection() try: cursor = conn.cursor() yield cursor conn.commit() except Exception: conn.rollback() raise finally: conn.close() def init_db(): """Cria tabelas se n√£o existirem (MVP, sem ORM externo).""" from .models import DDL with db_cursor() as cur: for stmt in DDL: cur.execute(stmt)
